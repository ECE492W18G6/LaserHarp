#include "audio.h"

/*
 *********************************************************************************************************
 *                                    read_audio_data()
 *
 * Description : Reads audio data from the Altera University IP core into a buffer
 *
 * Arguments   : buffer	       	A buffer allocated to hold the audio data
 * 				len				The number of samples to be read
 * 				channel 		Specifies which channel
 *
 * Returns     : The number of audio samples read into the buffer
 *
 *********************************************************************************************************
 */
INT32U read_audio_data(INT32U * buffer, INT32U len, INT32U channel) {

	INT32U fifospace;
	INT32U count = 0;

	while (count < len)
	{

		//printf("attempting to read word\n");

		// determine the number of available words to be read from the channel
		fifospace = alt_read_word(AUDIO_BASE + AUDIO_FIFOSPACE_OFFSET);

		if (count == 0)
		{
			printf("read word 0x%x for fifospace\n", fifospace);
		}

		printf("read word %d for fifospace\n", fifospace);

		INT8U num_words;
		if (channel == LEFT_CHANNEL)
		{
			num_words = (fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_BIT_OFFSET;
		}
		else if (channel == RIGHT_CHANNEL)
		{
			num_words = (fifospace & AUDIO_FIFOSPACE_RARC_MASK) >> AUDIO_FIFOSPACE_RARC_BIT_OFFSET;
		}

		// read the next available word
		if (num_words > 0)
		{
			if (channel == LEFT_CHANNEL)
			{
				buffer[count] = alt_read_word(AUDIO_BASE + AUDIO_LEFTDATA_OFFSET);
			}
			else if (channel == RIGHT_CHANNEL)
			{
				buffer[count] = alt_read_word(AUDIO_BASE + AUDIO_RIGHTDATA_OFFSET);
			}
			count = count + 1;
		}
		else
		{
			break;
		}

	}

	return count;
}




/*
 *********************************************************************************************************
 *                                    write_audio_data()
 *
 * Description : Writes audio data to the Altera University IP core from a buffer
 *
 * Arguments   : buffer	       	A buffer allocated to hold the audio data
 * 				len				The number of samples to be read
 * 				channel 		Specifies which channel
 *
 * Returns     : The number of audio samples read into the buffer
 *
 *********************************************************************************************************
 */
INT32U write_audio_data(INT32U * buffer, INT32U len, INT32U channel) {

	INT32U fifospace;
	INT32U count = 0;

	while (count < len)
	{
		// determine the number of available space for words in the channel
		fifospace = alt_read_word(AUDIO_BASE + AUDIO_FIFOSPACE_OFFSET);

		INT8U num_words;
		if (channel == LEFT_CHANNEL)
		{
			num_words = (fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_BIT_OFFSET;
		}
		else if (channel == RIGHT_CHANNEL)
		{
			num_words = (fifospace & AUDIO_FIFOSPACE_WSRC_MASK) >> AUDIO_FIFOSPACE_WSRC_BIT_OFFSET;
		}

		// write word to the next available space
		if (num_words > 0)
		{
			if (channel == LEFT_CHANNEL)
			{
				alt_write_word(AUDIO_BASE + AUDIO_LEFTDATA_OFFSET, buffer[count]);
			}
			else if (channel == RIGHT_CHANNEL)
			{
				alt_write_word(AUDIO_BASE + AUDIO_RIGHTDATA_OFFSET, buffer[count]);
			}
			count = count + 1;
		}
		else
		{
			break;
		}

	}

	return count;

}
