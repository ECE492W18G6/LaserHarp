--lpm_add_sub CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_PIPELINE=1 LPM_REPRESENTATION="SIGNED" LPM_WIDTH=14 aclr add_sub cin clken clock dataa datab result
--VERSION_BEGIN 17.0 cbx_cycloneii 2017:07:19:18:07:03:SJ cbx_lpm_add_sub 2017:07:19:18:07:03:SJ cbx_mgl 2017:07:19:18:10:29:SJ cbx_nadder 2017:07:19:18:07:03:SJ cbx_stratix 2017:07:19:18:07:03:SJ cbx_stratixii 2017:07:19:18:07:03:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Intel and sold by Intel or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.


FUNCTION cyclonev_lcell_comb (cin, dataa, datab, datac, datad, datae, dataf, datag, sharein)
WITH ( DONT_TOUCH, EXTENDED_LUT, LUT_MASK, SHARED_ARITH)
RETURNS ( combout, cout, shareout, sumout);

--synthesis_resources = lut 14 reg 14 
SUBDESIGN add_sub_gjk
( 
	aclr	:	input;
	add_sub	:	input;
	cin	:	input;
	clken	:	input;
	clock	:	input;
	dataa[13..0]	:	input;
	datab[13..0]	:	input;
	result[13..0]	:	output;
) 
VARIABLE 
	dffe50 : dffe;
	dffe51 : dffe;
	dffe52 : dffe;
	dffe53 : dffe;
	dffe54 : dffe;
	dffe55 : dffe;
	dffe56 : dffe;
	dffe57 : dffe;
	dffe58 : dffe;
	dffe59 : dffe;
	dffe60 : dffe;
	dffe61 : dffe;
	dffe62 : dffe;
	dffe63 : dffe;
	add_sub_cella[13..0] : cyclonev_lcell_comb
		WITH (
			EXTENDED_LUT = "off",
			LUT_MASK = "00000FF00000FF00",
			SHARED_ARITH = "off"
		);
	lsb_cin_wire[0..0]	: WIRE;

BEGIN 
	dffe50.clk = clock;
	dffe50.clrn = (! aclr);
	dffe50.d = add_sub_cella[0].sumout;
	dffe50.ena = clken;
	dffe51.clk = clock;
	dffe51.clrn = (! aclr);
	dffe51.d = add_sub_cella[1].sumout;
	dffe51.ena = clken;
	dffe52.clk = clock;
	dffe52.clrn = (! aclr);
	dffe52.d = add_sub_cella[2].sumout;
	dffe52.ena = clken;
	dffe53.clk = clock;
	dffe53.clrn = (! aclr);
	dffe53.d = add_sub_cella[3].sumout;
	dffe53.ena = clken;
	dffe54.clk = clock;
	dffe54.clrn = (! aclr);
	dffe54.d = add_sub_cella[4].sumout;
	dffe54.ena = clken;
	dffe55.clk = clock;
	dffe55.clrn = (! aclr);
	dffe55.d = add_sub_cella[5].sumout;
	dffe55.ena = clken;
	dffe56.clk = clock;
	dffe56.clrn = (! aclr);
	dffe56.d = add_sub_cella[6].sumout;
	dffe56.ena = clken;
	dffe57.clk = clock;
	dffe57.clrn = (! aclr);
	dffe57.d = add_sub_cella[7].sumout;
	dffe57.ena = clken;
	dffe58.clk = clock;
	dffe58.clrn = (! aclr);
	dffe58.d = add_sub_cella[8].sumout;
	dffe58.ena = clken;
	dffe59.clk = clock;
	dffe59.clrn = (! aclr);
	dffe59.d = add_sub_cella[9].sumout;
	dffe59.ena = clken;
	dffe60.clk = clock;
	dffe60.clrn = (! aclr);
	dffe60.d = add_sub_cella[10].sumout;
	dffe60.ena = clken;
	dffe61.clk = clock;
	dffe61.clrn = (! aclr);
	dffe61.d = add_sub_cella[11].sumout;
	dffe61.ena = clken;
	dffe62.clk = clock;
	dffe62.clrn = (! aclr);
	dffe62.d = add_sub_cella[12].sumout;
	dffe62.ena = clken;
	dffe63.clk = clock;
	dffe63.clrn = (! aclr);
	dffe63.d = add_sub_cella[13].sumout;
	dffe63.ena = clken;
	add_sub_cella[].cin = ( add_sub_cella[12..0].cout, lsb_cin_wire[]);
	add_sub_cella[].datac = add_sub;
	add_sub_cella[].datad = dataa[];
	add_sub_cella[].dataf = datab[];
	lsb_cin_wire[] = cin;
	result[] = ( dffe63.q, dffe62.q, dffe61.q, dffe60.q, dffe59.q, dffe58.q, dffe57.q, dffe56.q, dffe55.q, dffe54.q, dffe53.q, dffe52.q, dffe51.q, dffe50.q);
END;
--VALID FILE
